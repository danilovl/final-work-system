version: '3.8'

services:
  redis:
    build: docker/redis
    ports:
      - '7102:6379'

  elasticsearch:
    build: docker/elasticsearch
    restart: always
    ports:
      - '7103:9200'
      - '7104:9300'
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=password
#    volumes:
#      - ./docker-data/elasticsearch/data:/usr/share/elasticsearch/data

  rabbitmq:
    build: docker/rabbitmq
    ports:
      - '7105:5672'
      - '7106:15672'

  mysql:
    build: docker/mysql
    ports:
      - '7101:3306'
    volumes:
      - './docker/mysql/conf/custom.cnf:/etc/mysql/conf.d/custom.cnf'
      - './docker-data/mysql/data:/var/lib/mysql/'
    environment:
      - 'MYSQL_ALLOW_EMPTY_PASSWORD=1'
      - 'MYSQL_ROOT_PASSWORD='
      - 'MYSQL_DATABASE=final_work_system'
      - 'MYSQL_USER=root'
      - 'MYSQL_PASSWORD='

  node:
    build:
      context: ./
      dockerfile: ./docker/node/Dockerfile
    volumes:
      - './:/var/www/html/app'
    working_dir: /var/www/html/app

  php:
    build:
      context: ./
      dockerfile: ./docker/php/Dockerfile
      target: final-work-system-php-www-data
      args:
        - GITHUB_ACTION_UUID
        - UUID=1000
    expose:
      - '9000'
    volumes:
      - './:/var/www/html/app'
      - './docker/php/conf/php-fpm.conf:/etc/php-fpm.conf'
      - './docker/php/conf/php.ini:/usr/local/etc/php/conf.d/100-php.ini'
    working_dir: /var/www/html/app
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://elasticsearch:9200', '-u', 'elastic:password' ]
      interval: 30s
      timeout: 20s
      retries: 3
    depends_on:
      - redis
      - mysql
      - rabbitmq
      - elasticsearch
      - mercure
      - apm-server

  nginx:
    build: docker/nginx
    ports:
      - '7100:80'
    volumes:
      - './:/var/www/html/app'
      - './docker/nginx/conf/default.conf:/etc/nginx/conf.d/default.conf'
    depends_on:
      - php

  mercure:
    build: docker/mercure
    restart: unless-stopped
    environment:
      SERVER_NAME: ':80'
      MERCURE_PUBLISHER_JWT_KEY: '!ChangeThisMercureHubJWTSecretKey!'
      MERCURE_SUBSCRIBER_JWT_KEY: '!ChangeThisMercureHubJWTSecretKey!'
      MERCURE_EXTRA_DIRECTIVES: |
        cors_origins "http://work-system.local:8100"
        anonymous
    ports:
      - '7107:80'

  minio:
    build: docker/minio
    command: server --console-address ":9001" /data/
    ports:
      - '7108:9000'
      - '7109:9001'
    environment:
      MINIO_ROOT_USER: MINIO_ROOT_USER
      MINIO_ROOT_PASSWORD: MINIO_ROOT_PASSWORD
    volumes:
      - ./public/upload:/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://php:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  kibana:
    build: docker/kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: superuser
      ELASTICSEARCH_PASSWORD: superuser
    ports:
      - '7110:5601'
    depends_on:
      - elasticsearch

  apm-server:
    image: docker.elastic.co/apm/apm-server:7.17.21
    depends_on:
      - elasticsearch
      - kibana
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    ports:
      - '7120:8200'
    command: >
      apm-server -e
        -E apm-server.rum.enabled=true
        -E setup.kibana.host=kibana:5601
        -E setup.template.settings.index.number_of_replicas=0
        -E apm-server.kibana.enabled=true
        -E apm-server.kibana.host=kibana:5601
        -E output.elasticsearch.hosts=["elasticsearch:9200"]
        -E output.elasticsearch.username=superuser
        -E output.elasticsearch.password=superuser
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://apm-server:8200

  supervisor:
    build:
      context: ./
      dockerfile: ./docker/php/Dockerfile
      target: final-work-system-php-supervisor
    restart: always
    ports:
      - '7130:9001'
    depends_on:
      - rabbitmq
      - mysql
      - elasticsearch
    volumes:
      - './:/var/www/html/app'
